<?php
/**
 * Created by PhpStorm.
 * User: lukaskammerling
 * Date: 28.01.18
 * Time: 20:58
 */

namespace LKDev\HetznerCloud\Models\Servers;

use LKDev\HetznerCloud\HetznerAPIClient;
use LKDev\HetznerCloud\Models\Actions\Action;
use LKDev\HetznerCloud\Models\Datacenters\Datacenter;
use LKDev\HetznerCloud\Models\Images\Image;
use LKDev\HetznerCloud\Models\ISOs\ISO;
use LKDev\HetznerCloud\Models\Model;
use LKDev\HetznerCloud\Models\Protection;
use LKDev\HetznerCloud\Models\Servers\Types\ServerType;

/**
 *
 */
class Server extends Model
{
    /**
     * @var int
     */
    public $id;

    /**
     * @var string
     */
    public $name;

    /**
     * @var string
     */
    public $status;

    /**
     * @var string
     */
    public $created;

    /**
     * @var array
     */
    public $publicNet;

    /**
     * @var ServerType
     */
    public $serverType;

    /**
     * @var \LKDev\HetznerCloud\Models\Datacenters\Datacenter
     */
    public $datacenter;

    /**
     * @var Image
     */
    public $image;

    /**
     * @var ISO
     */
    public $iso;

    /**
     * @var bool
     */
    public $rescueEnabled;

    /**
     * @var bool
     */
    public $locked;

    /**
     * @var string
     */
    public $backupWindow;

    /**
     * @var int
     */
    public $outgoingTraffic;

    /**
     * @var int
     */
    public $ingoingTraffic;

    /**
     * @var int
     */
    public $includedTraffic;

    /**
     * @var array|\LKDev\HetznerCloud\Models\Protection
     */
    public $protection;

    /**
     *
     *
     * @param int $serverId
     */
    public function __construct(int $serverId)
    {
        $this->id = $serverId;
        parent::__construct();
    }

    /**
     * @param $data
     * @return \LKDev\HetznerCloud\Models\Servers\Server
     */
    public function setAdditionalData($data)
    {
        $this->name = $data->name;
        $this->status = $data->status ?: null;
        $this->publicNet = $data->public_net ?: null;
        $this->serverType = $data->server_type ?: ServerType::parse($data->server_type);
        $this->datacenter = $data->datacenter ?: Datacenter::parse($data->datacenter);
        $this->image = $data->image ?: Image::parse($data->image);
        $this->iso = $data->iso ?: ISO::parse($data->iso);
        $this->rescueEnabled = $data->rescue_enabled ?: null;
        $this->locked = $data->locked ?: null;
        $this->backupWindow = $data->backup_window ?: null;
        $this->outgoingTraffic = $data->outgoing_traffic ?: null;
        $this->ingoingTraffic = $data->ingoing_traffic ?: null;
        $this->includedTraffic = $data->included_traffic ?: null;
        $this->protection = $data->protection ?: Protection::parse($data->protection);

        return $this;
    }

    /**
     * Reload the data of the server
     *
     * @return Server
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function get()
    {
        $servers = new Servers();

        return $servers->get($this->id);
    }

    /**
     * Starts a server by turning its power on.
     *
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function powerOn(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/poweron'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Reboots a server gracefully by sending an ACPI request. The server operating system must support ACPI and react to the request, otherwise the server will not reboot.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-1
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function softReboot(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/reboot'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Cuts power to a server and starts it again. This forcefully stops it without giving the server operating system time to gracefully stop. This may lead to data loss, itâ€™s equivalent to pulling the power cord and plugging it in again. Reset should only be used when reboot does not work.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-2
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function reset(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/reset'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Shuts down a server gracefully by sending an ACPI shutdown request. The server operating system must support ACPI and react to the request, otherwise the server will not shut down.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-3
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function shutdown(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/shutdown'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Cuts power to the server. This forcefully stops it without giving the server operating system time to gracefully stop. May lead to data loss, equivalent to pulling the power cord. Power off should only be used when shutdown does not work.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-4
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function powerOff(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/poweroff'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Resets the root password. Only works for Linux systems that are running the qemu guest agent. Server must be powered on (state on) in order for this operation to succeed.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-5
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function resetRootPassword()
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/reset_password'));
        if (!HetznerAPIClient::hasError($response)) {
            $payload = json_decode((string)$response->getBody());
            $payload->action = Action::parse($payload->action);

            return $payload;
        }
    }

    /**
     * Enable the Hetzner Rescue System for this server. The next time a Server with enabled rescue mode boots it will start a special minimal Linux distribution designed for repair and reinstall.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-6
     * @param string $type
     * @param array $ssh_keys
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function enableRescue($type = 'linux64', $ssh_keys = []): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/enable_rescue'), [
            'json' => [
                'type' => $type,
                'ssh_keys' => $ssh_keys,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Disables the Hetzner Rescue System for a server. This makes a server start from its disks on next reboot.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-7
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function disableRescue(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/disable_rescue'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Creates an image (snapshot) from a server by copying the contents of its disks. This creates a snapshot of the current state of the disk and copies it into an image. If the server is currently running you must make sure that its disk content is consistent. Otherwise, the created image may not be readable.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-8
     * @param string $description
     * @param string $type
     * @return \LKDev\HetznerCloud\Models\Images\Image
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function createImage(string $description = '', string $type = 'snapshot')
    {

        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/create_image'), [
            'json' => [
                'description' => $description,
                'type' => $type,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            $payload = json_decode((string)$response->getBody());
            $payload->action = Action::parse($payload->action);
            $payload->image = Image::parse($payload->image);

            return $payload;
        }
    }

    /**
     * Rebuilds a server overwriting its disk with the content of an image, thereby destroying all data on the target server
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-9
     * @param \LKDev\HetznerCloud\Models\Images\Image $image
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function rebuildFromImage(Image $image): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/rebuild'), [
            'json' => [
                'image' => $image->name,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Changes the type (Cores, RAM and disk sizes) of a server.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-10
     * @param \LKDev\HetznerCloud\Models\Servers\Types\ServerType $serverType
     * @param bool $upgradeDisk
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function changeType(ServerType $serverType, bool $upgradeDisk = false): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/change_type'), [
            'json' => [
                'server_type' => $serverType->name,
                'upgrade_disk' => $upgradeDisk,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Enables and configures the automatic daily backup option for the server. Enabling automatic backups will increase the price of the server by 20%
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-11
     * @param string|null $backupWindow
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function enableBackups(string $backupWindow = null): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/enable_backup'), [
            'json' => [
                'backup_window' => $backupWindow,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Disables the automatic backup option and deletes all existing Backups for a Server.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-12
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function disableBackups(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/disable_backup'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Attaches an ISO to a server. The Server will immediately see it as a new disk. An already attached ISO will automatically be detached before the new ISO is attached.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-13
     * @param \LKDev\HetznerCloud\Models\ISOs\ISO $iso
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function attachISO(ISO $iso): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/attach_iso'), [
            'json' => [
                'iso' => $iso->name,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Detaches an ISO from a server. In case no ISO image is attached to the server, the status of the returned action is immediately set to success.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-14
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function detachISO(): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/detach_iso'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Changes the hostname that will appear when getting the hostname belonging to the primary IPs (ipv4 and ipv6) of this server.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-15
     * @param string $ip
     * @param string $dnsPtr
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function changeReverseDNS(string $ip, string $dnsPtr): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/change_dns_ptr'), [
            'json' => [
                'ip' => $ip,
                'dns_ptr' => $dnsPtr,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Get Metrics for specified server.
     *
     * @see https://docs.hetzner.cloud/#servers-get-metrics-for-a-server
     * @param string $type
     * @param string $start
     * @param string $end
     * @param int|null $step
     * @return APIResponse
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function metrics(string $type, string $start, string $end, int $step = null)
    {
        $response = $this->httpClient->get($this->replaceServerIdInUri('servers/{id}/metrics?') . http_build_query(compact('type', 'start', 'end', 'step')));
        if (!HetznerAPIClient::hasError($response)) {
            return APIResponse::create([
                'metrics' => json_decode((string)$response->getBody())->metrics
            ], $response->getHeaders());
        }
    }

    /**
     * Deletes a server. This immediately removes the server from your account, and it is no longer accessible.
     *
     * @see https://docs.hetzner.cloud/#resources-servers-delete
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function delete(): Action
    {
        $response = $this->httpClient->delete($this->replaceServerIdInUri('servers/{id}'));
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * Changes the name of a server.
     *
     * @see https://docs.hetzner.cloud/#resources-servers-put
     * @param string $name
     * @return \LKDev\HetznerCloud\Models\Servers\Server
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function changeName(string $name): Server
    {
        $response = $this->httpClient->put($this->replaceServerIdInUri('servers/{id}'), [
            'json' => [
                'name' => $name,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Server::parse(json_decode((string)$response->getBody())->server);
        }
    }

    /**
     * Requests credentials for remote access via vnc over websocket to keyboard, monitor, and mouse for a server
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-16
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function requestConsole(): \stdClass
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/request_console'));
        if (!HetznerAPIClient::hasError($response)) {
            $payload = json_decode((string)$response->getBody());
            $payload->action = Action::parse($payload->action);

            return $payload;
        }
    }

    /**
     * Changes the protection configuration of the server.
     *
     * @see https://docs.hetzner.cloud/#resources-server-actions-post-16
     * @param bool $delete
     * @param bool $rebuild
     * @return \LKDev\HetznerCloud\Models\Actions\Action
     * @throws \LKDev\HetznerCloud\APIException
     */
    public function changeProtection(bool $delete = true, bool $rebuild = true): Action
    {
        $response = $this->httpClient->post($this->replaceServerIdInUri('servers/{id}/actions/change_protection'), [
            'json' => [
                'delete' => $delete,
                'rebuild' => $rebuild,
            ],
        ]);
        if (!HetznerAPIClient::hasError($response)) {
            return Action::parse(json_decode((string)$response->getBody())->action);
        }
    }

    /**
     * @param string $uri
     * @return string
     */
    protected function replaceServerIdInUri(string $uri): string
    {
        return str_replace('{id}', $this->id, $uri);
    }

    /**
     * @param  $input
     * @return \LKDev\HetznerCloud\Models\Servers\Server|static
     */
    public static function parse($input)
    {
        if ($input == null) {
            return null;
        }

        return (new self($input->id))->setAdditionalData($input);
    }
}

